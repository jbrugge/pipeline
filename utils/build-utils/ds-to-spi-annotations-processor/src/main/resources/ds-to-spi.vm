#if( ${component.packageName} )
package ${component.packageName};

#end
import java.util.Iterator;
import java.util.ServiceLoader;

public class ${component.spiClassName} extends ${component.qualifiedClassName}
#if( ${component.immediate} )
implements org.daisy.common.service.CreateOnStart  ## maybe this is not exactly what we want but it's close enough
#end
{
	
	public ${component.spiClassName}() {
		super();
#foreach($reference in ${component.references})
		{
			Iterator<${reference.service}> services = ServiceLoader.load(${reference.service}.class).iterator();
#if( ${reference.cardinality} == "1..1" )
			int minRef = 1;
			int maxRef = 1;
#elseif( ${reference.cardinality} == "1..n" )
			int minRef = 1;
			int maxRef = -1;
#elseif( ${reference.cardinality} == "0..1" )
			int minRef = 0;
			int maxRef = 1;
#else
			int minRef = 0;
			int maxRef = -1;
#end
			int refCount = 0;
			while (services.hasNext()) {
				try {
					${reference.methodName}(services.next());
					refCount++;
					if (maxRef > 0 && refCount == maxRef)
						break;
				} catch (Exception e) {
				}
			}
			if (refCount < minRef) {
				throw new RuntimeException("No ${reference.service} found");
			}
		}
#end
#if( ${component.activate} )
#if( ${component.activate.propertiesArgumentType} )
		${propertiesArgumentType.getName()} props = new ${propertiesArgumentType.toString()}();
#foreach($property in ${component.properties})
		props.put(${property.keyLiteral}, ${property.valueLiteral});
#end
		${component.activate.methodName}(props);
#else
		${component.activate.methodName}();
#end
#end
	}
}
